# Pega DX MCP Server - Project Intelligence

## Project Overview
This is a production-ready MCP (Model Context Protocol) server that bridges AI applications with Pega Platform DX APIs. The server transforms complex Pega interactions into conversational AI experiences.

## Key Implementation Patterns

### MCP Server Architecture
- **Primary Entry Point**: `src/index.js` - Main MCP server implementation
- **Tool Pattern**: Each Pega operation is a separate tool class (GetCaseTool, CreateCaseTool)
- **Static Definitions**: Tools define their schema statically, execute dynamically
- **Error Propagation**: Multi-layer error handling with user-friendly messages

### Critical File Relationships
```
src/index.js (MCP Server)
├── src/tools/get-case.js (GetCaseTool)
├── src/tools/create-case.js (CreateCaseTool)
│   └── src/api/pega-client.js (PegaAPIClient)
│       ├── src/auth/oauth2-client.js (OAuth2Client)
│       └── src/config.js (Configuration)
```

### Authentication Flow
- **OAuth2 Client Credentials**: Production-grade security pattern
- **Token Caching**: In-memory with 5-minute expiry buffer
- **Auto-refresh**: Handles 401 responses automatically
- **Configuration**: Environment variables only (security best practice)

### Error Handling Philosophy
- **User-Friendly**: Technical errors translated to actionable guidance
- **Structured**: Categorized error types (NOT_FOUND, UNAUTHORIZED, etc.)
- **Security-Conscious**: No sensitive information in user-facing errors
- **Recovery-Oriented**: Always provide next steps for resolution

## Development Workflow

### Testing Strategy
- **Real Pega Instance**: All tests run against live Pega platform
- **Test Sequence**: OAuth → API → MCP Protocol → Integration
- **Manual Testing**: Comprehensive test files in `/tests` directory
- **Key Test Files**:
  - `oauth-debug.js` - Authentication verification
  - `api-test.js` - Direct API testing
  - `mcp-tool-test.js` - MCP protocol compliance
  - `mcp-create-case-test.js` - Case creation scenarios

### Configuration Management
- **Environment Variables**: All sensitive data in `.env` file
- **Validation**: Required configuration checked at startup
- **Template**: `mcp-config-example.json` for MCP client setup
- **Critical Variables**: PEGA_BASE_URL, PEGA_CLIENT_ID, PEGA_CLIENT_SECRET, PEGA_ACCESS_TOKEN_URL

### Code Quality Standards
- **ES Modules**: Modern JavaScript with explicit file extensions
- **No Persistence**: Stateless design with in-memory token caching only
- **Input Validation**: All parameters validated against JSON schema
- **URL Encoding**: Proper handling of case IDs with spaces/special chars

## Pega Platform Integration

### API Patterns
- **Case IDs**: Always URL encode (spaces and special characters common)
- **eTag Headers**: Capture for future update operations
- **Query Parameters**: Optional viewType and pageName for UI metadata
- **Base URL Structure**: `/prweb/api/application/v2`

### Common Pega Gotchas
- **Case ID Format**: Full case handle required (e.g., "METE-MYDEMOAPP-WORK T-3")
- **OAuth2 Setup**: Must be configured in Pega Platform first
- **Field Mapping**: Content fields must be in AllowedStartingFields data transform
- **Parent Cases**: Use full case handle for parentCaseID parameter

### Error Patterns
- **404 NOT_FOUND**: Case doesn't exist or access denied
- **400 BAD_REQUEST**: Invalid case type or missing required fields
- **401 UNAUTHORIZED**: Token expired (auto-refresh handles this)
- **422 UNPROCESSABLE_ENTITY**: Field validation failures

## MCP Client Integration

### Claude Desktop Setup
- **Absolute Path Required**: MCP client needs full path to `src/index.js`
- **Environment Variables**: All configuration in MCP client config
- **stdio Transport**: Only supported transport (no HTTP/WebSocket)
- **Process Lifecycle**: MCP client manages server process

### Tool Discovery
- **Dynamic Registration**: Tools register themselves with server
- **Schema Validation**: JSON Schema for all tool parameters
- **Response Format**: Structured content with markdown text

## Performance Considerations

### Optimization Patterns
- **Token Caching**: Reduces OAuth2 overhead
- **URL Construction**: Efficient query parameter building
- **Memory Management**: Minimal footprint, stateless tools
- **Request Timeouts**: 30-second default (configurable)

### Scaling Limitations
- **Single Instance**: One Pega instance per server process
- **No Persistence**: All state in memory (security/simplicity trade-off)
- **stdio Transport**: Desktop clients only (no web-based clients)

## Future Enhancement Patterns

### Immediate Opportunities
- **Assignment Tools**: pega_get_assignments, pega_execute_assignment
- **Case Search**: pega_search_cases with filtering
- **Better Retry Logic**: Exponential backoff for failures

### Architecture Evolution
- **Multi-tenant**: Support multiple Pega instances
- **HTTP Transport**: Web-based MCP client support
- **Data API**: Generic data page access
- **Attachment Handling**: File upload/download capabilities

## Debugging & Troubleshooting

### Common Issues
1. **OAuth2 Failures**: Check client credentials in Pega Platform
2. **Case Not Found**: Verify case ID format and permissions
3. **Field Validation**: Check AllowedStartingFields data transform
4. **Network Issues**: Verify HTTPS access to Pega instance

### Debug Techniques
- **Console Logging**: Available via stderr (visible in MCP client)
- **Test Files**: Use individual test files to isolate issues
- **Environment Check**: Validate all required variables set
- **Token Inspection**: OAuth2 debug test shows token acquisition

## Project Maturity

### Production Ready Features
- ✅ Core MCP server functionality
- ✅ OAuth2 authentication with auto-refresh
- ✅ Case retrieval and creation tools
- ✅ Comprehensive error handling
- ✅ Complete documentation
- ✅ Testing framework

### Technical Debt
- Manual testing only (no CI/CD pipeline)
- Single-instance limitation
- Limited error context in some scenarios
- No persistent configuration

This project represents a complete, production-ready MCP server implementation with best practices for security, error handling, and user experience. The modular architecture makes it easy to extend with additional Pega API tools.
